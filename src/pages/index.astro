---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';

interface Banda {
  nombre: string;
  integrantes: number;
}

interface Conjunto {
  nombre: string;
  integrantes: number;
  numeroBloques: number;
  bandas: Banda[];
}

interface Grupo {
  id: number;
  conjuntos: Conjunto[];
}

// Aquí normalmente cargarías los datos de una base de datos o API
const grupos: Grupo[] = [
  {
    id: 1,
    conjuntos: [
      {
        nombre: "Gran Trad. Autentica \"Diablada Oruro\"",
        integrantes: 377,
        numeroBloques: 0,
        bandas: [
          { nombre: "Banda los Impecables", integrantes: 68 },
          { nombre: "Banda Proyección", integrantes: 67 },
          { nombre: "Banda Decadentes", integrantes: 62 }
        ]
      },
      // Agrega más conjuntos aquí...
    ]
  },
  // Agrega más grupos aquí...
];

const totalBailarines = grupos.reduce((total, grupo) => 
  total + grupo.conjuntos.reduce((subtotal, conjunto) => subtotal + conjunto.integrantes, 0), 0);

const totalBanderos = grupos.reduce((total, grupo) => 
  total + grupo.conjuntos.reduce((subtotal, conjunto) => 
    subtotal + conjunto.bandas.reduce((bandaTotal, banda) => bandaTotal + banda.integrantes, 0), 0), 0);
---

<Layout title="Carnaval de Oruro 2025 - Datos de Conjuntos">
  <main class="container mx-auto px-4 py-8 bg-gray-100 min-h-screen">
    <h1 class="text-4xl font-bold text-center mb-8 text-gray-800">Carnaval de Oruro 2025</h1>
    
    <div class="mb-8 bg-white shadow rounded-lg p-6">
      <h2 class="text-2xl font-semibold mb-4 text-gray-800">Totales</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="bg-blue-100 p-4 rounded-lg">
          <p class="text-xl font-semibold text-blue-800">Total Bailarines: <span id="total-bailarines">{totalBailarines}</span></p>
        </div>
        <div class="bg-green-100 p-4 rounded-lg">
          <p class="text-xl font-semibold text-green-800">Total Banderos: <span id="total-banderos">{totalBanderos}</span></p>
        </div>
      </div>
    </div>

    <div class="mb-8">
      <h2 class="text-2xl font-semibold mb-4 text-gray-700">Selecciona un conjunto:</h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        {grupos.map((grupo) => (
          <div class="bg-white shadow rounded-lg p-4">
            <h3 class="text-xl font-semibold mb-2 text-gray-800">Grupo {grupo.id}</h3>
            <ul>
              {grupo.conjuntos.map((conjunto) => (
                <li>
                  <button
                    class="text-left w-full py-2 px-4 hover:bg-gray-100 rounded transition-colors text-gray-700"
                    data-conjunto={JSON.stringify(conjunto)}
                  >
                    {conjunto.nombre}
                  </button>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>
    </div>

    <div id="datos-conjunto" class="bg-white shadow rounded-lg p-6 opacity-0 transition-opacity duration-500">
      <h2 id="nombre-conjunto" class="text-3xl font-bold mb-4 text-gray-800"></h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <p class="text-xl mb-2 text-gray-700">Integrantes: <span id="integrantes"></span></p>
          <p class="text-xl mb-2 text-gray-700">Número de bloques: <span id="bloques"></span></p>
          <p class="text-xl mb-4 text-gray-700">Número de bandas: <span id="num-bandas"></span></p>
          <h3 class="text-2xl font-semibold mb-2 text-gray-800">Bandas:</h3>
          <ul id="lista-bandas" class="list-disc pl-5 text-gray-700"></ul>
        </div>
        <div>
          <canvas id="grafico-bandas" width="400" height="200"></canvas>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  import { Chart, type ChartConfiguration } from 'chart.js/auto';

  interface Banda {
    nombre: string;
    integrantes: number;
  }

  interface Conjunto {
    nombre: string;
    integrantes: number;
    numeroBloques: number;
    bandas: Banda[];
  }

  document.addEventListener('DOMContentLoaded', () => {
    const botones = document.querySelectorAll<HTMLButtonElement>('[data-conjunto]');
    const datosConjunto = document.getElementById('datos-conjunto');
    const nombreConjunto = document.getElementById('nombre-conjunto');
    const integrantes = document.getElementById('integrantes');
    const bloques = document.getElementById('bloques');
    const numBandas = document.getElementById('num-bandas');
    const listaBandas = document.getElementById('lista-bandas');
    let grafico: Chart | null = null;

    botones.forEach(boton => {
      boton.addEventListener('click', () => {
        const conjunto = JSON.parse(boton.dataset.conjunto || '{}') as Conjunto;
        
        if (nombreConjunto) nombreConjunto.textContent = conjunto.nombre;
        if (integrantes) integrantes.textContent = conjunto.integrantes.toString();
        if (bloques) bloques.textContent = conjunto.numeroBloques.toString() || 'No especificado';
        if (numBandas) numBandas.textContent = conjunto.bandas.length.toString();
        
        if (listaBandas) {
          listaBandas.innerHTML = conjunto.bandas.map(banda => 
            `<li>${banda.nombre}: ${banda.integrantes} integrantes</li>`
          ).join('');
        }
        
        actualizarGrafico(conjunto.bandas);
        
        if (datosConjunto) {
          datosConjunto.classList.remove('opacity-0');
          datosConjunto.classList.add('opacity-100');
        }
      });
    });

    function actualizarGrafico(bandas: Banda[]) {
      const canvas = document.getElementById('grafico-bandas') as HTMLCanvasElement | null;
      if (!canvas) return;

      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      
      if (grafico) {
        grafico.destroy();
      }
      
      const config: ChartConfiguration = {
        type: 'bar',
        data: {
          labels: bandas.map(banda => banda.nombre),
          datasets: [{
            label: 'Integrantes por Banda',
            data: bandas.map(banda => banda.integrantes),
            backgroundColor: [
              'rgba(255, 99, 132, 0.8)',
              'rgba(54, 162, 235, 0.8)',
              'rgba(255, 206, 86, 0.8)',
              'rgba(75, 192, 192, 0.8)',
              'rgba(153, 102, 255, 0.8)',
            ],
            borderColor: [
              'rgba(255, 99, 132, 1)',
              'rgba(54, 162, 235, 1)',
              'rgba(255, 206, 86, 1)',
              'rgba(75, 192, 192, 1)',
              'rgba(153, 102, 255, 1)',
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      };
      
      grafico = new Chart(ctx, config);
    }
  });
</script>